// Code generated by counterfeiter. DO NOT EDIT.
package fake_exec

import (
	"context"
	"os/exec"
	"sync"

	"github.com/daniellavoie/go-shim/execshim"
)

type FakeExec struct {
	CommandStub        func(name string, arg ...string) *exec.Cmd
	commandMutex       sync.RWMutex
	commandArgsForCall []struct {
		name string
		arg  []string
	}
	commandReturns struct {
		result1 *exec.Cmd
	}
	commandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	CommandContextStub        func(ctx context.Context, name string, arg ...string) *exec.Cmd
	commandContextMutex       sync.RWMutex
	commandContextArgsForCall []struct {
		ctx  context.Context
		name string
		arg  []string
	}
	commandContextReturns struct {
		result1 *exec.Cmd
	}
	commandContextReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	LookPathStub        func(file string) (string, error)
	lookPathMutex       sync.RWMutex
	lookPathArgsForCall []struct {
		file string
	}
	lookPathReturns struct {
		result1 string
		result2 error
	}
	lookPathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExec) Command(name string, arg ...string) *exec.Cmd {
	fake.commandMutex.Lock()
	ret, specificReturn := fake.commandReturnsOnCall[len(fake.commandArgsForCall)]
	fake.commandArgsForCall = append(fake.commandArgsForCall, struct {
		name string
		arg  []string
	}{name, arg})
	fake.recordInvocation("Command", []interface{}{name, arg})
	fake.commandMutex.Unlock()
	if fake.CommandStub != nil {
		return fake.CommandStub(name, arg...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.commandReturns.result1
}

func (fake *FakeExec) CommandCallCount() int {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	return len(fake.commandArgsForCall)
}

func (fake *FakeExec) CommandArgsForCall(i int) (string, []string) {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	return fake.commandArgsForCall[i].name, fake.commandArgsForCall[i].arg
}

func (fake *FakeExec) CommandReturns(result1 *exec.Cmd) {
	fake.CommandStub = nil
	fake.commandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeExec) CommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.CommandStub = nil
	if fake.commandReturnsOnCall == nil {
		fake.commandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.commandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeExec) CommandContext(ctx context.Context, name string, arg ...string) *exec.Cmd {
	fake.commandContextMutex.Lock()
	ret, specificReturn := fake.commandContextReturnsOnCall[len(fake.commandContextArgsForCall)]
	fake.commandContextArgsForCall = append(fake.commandContextArgsForCall, struct {
		ctx  context.Context
		name string
		arg  []string
	}{ctx, name, arg})
	fake.recordInvocation("CommandContext", []interface{}{ctx, name, arg})
	fake.commandContextMutex.Unlock()
	if fake.CommandContextStub != nil {
		return fake.CommandContextStub(ctx, name, arg...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.commandContextReturns.result1
}

func (fake *FakeExec) CommandContextCallCount() int {
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	return len(fake.commandContextArgsForCall)
}

func (fake *FakeExec) CommandContextArgsForCall(i int) (context.Context, string, []string) {
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	return fake.commandContextArgsForCall[i].ctx, fake.commandContextArgsForCall[i].name, fake.commandContextArgsForCall[i].arg
}

func (fake *FakeExec) CommandContextReturns(result1 *exec.Cmd) {
	fake.CommandContextStub = nil
	fake.commandContextReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeExec) CommandContextReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.CommandContextStub = nil
	if fake.commandContextReturnsOnCall == nil {
		fake.commandContextReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.commandContextReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeExec) LookPath(file string) (string, error) {
	fake.lookPathMutex.Lock()
	ret, specificReturn := fake.lookPathReturnsOnCall[len(fake.lookPathArgsForCall)]
	fake.lookPathArgsForCall = append(fake.lookPathArgsForCall, struct {
		file string
	}{file})
	fake.recordInvocation("LookPath", []interface{}{file})
	fake.lookPathMutex.Unlock()
	if fake.LookPathStub != nil {
		return fake.LookPathStub(file)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.lookPathReturns.result1, fake.lookPathReturns.result2
}

func (fake *FakeExec) LookPathCallCount() int {
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	return len(fake.lookPathArgsForCall)
}

func (fake *FakeExec) LookPathArgsForCall(i int) string {
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	return fake.lookPathArgsForCall[i].file
}

func (fake *FakeExec) LookPathReturns(result1 string, result2 error) {
	fake.LookPathStub = nil
	fake.lookPathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExec) LookPathReturnsOnCall(i int, result1 string, result2 error) {
	fake.LookPathStub = nil
	if fake.lookPathReturnsOnCall == nil {
		fake.lookPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.lookPathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExec) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExec) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ execshim.Exec = new(FakeExec)
